
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include<easyx.h>
#include<mmsystem.h>
#pragma comment(lib,"winmm.lib")
#include<stdbool.h>


/*--------------以下为函数声明部分--------------*/
void map_1();//绘图
void map_2();//绘图
void map_3();//绘图

void loading_1();//图片填充
void loading_2();//图片填充
void loading_3();//图片填充

void keystrock_1();//按键处理
void keystrock_2();//按键处理
void keystrock_3();//按键处理

bool judge_1();//判断过关
bool judge_2();//判断过关
bool judge_3();//判断过关

void playerBGM_1();
void playerBGM_2();
void playerBGM_3();
void playerBGM_4();
void playerBGM_5();
void playerBGM_6();

void gotostageselect();//跳转至关卡选择函数
void gotoHelp();//跳转至帮助页面函数

void main1();
void main2();
void main3();



/*--------------以下为数据部分--------------*/
/*
全局变量

用户按键：W A S D 鼠标左键
int level = 0(level++在main中)
三维数组[level][x1][y1]，x, y可理解为纵坐标与横坐标，每个数组坐标参数可在后面添加序号来区分
*/

//FLOOR(空地)0   WALL(墙)1   END(终点)2   BOX(箱子)3	PLATER(玩家)4   
//BOX_END(箱子到达终点)5 PLAYER_END(玩家站在终点位置)6
enum thing {
	FLOOR,
	WALL,
	END,
	BOX,
	PLAYER,
	BOX_END,
	PLAYER_END
};

//当前关卡
//(level++在main中)
int level = 0;
int level_2 = 0; 
int level_3 = 0;

//地图宽度
#define WIDTH 6
#define WIDTH_2 7
#define WIDTH_3 10

//地图长度
#define HEIGHT 6
#define HEIGHT_2 7
#define HEIGHT_3 8


//地图横纵坐标
int x = 0;
int y = 0;
int n = 0;
int m = 0;
int p = 0;
int q = 0;

//加载图片
IMAGE img_all[7];
IMAGE img_all_2[7]; 
IMAGE img_all_3[7];
IMAGE img, img1, img2;

//主函数
int main() {
	initgraph(960, 580);//创建窗口
while (true)
	{
		//加载图片

		loadimage(&img, "maininterface - 副本.png", 960, 580);
		loadimage(&img1, "help01.png", 960, 580);
		loadimage(&img2, "stageselect.png", 960, 580);
		putimage(0, 0, &img);
		ExMessage msg = { 0 };
		if (peekmessage(&msg, EX_MOUSE))//检测鼠标信息
		{
			switch (msg.message)//筛选鼠标信息类型
			{
			case WM_LBUTTONDOWN://左键信息
			{//判断是否点击关卡选择界面
				if (msg.x >= 401 && msg.y >= 256 && msg.x <= 572 && msg.y <= 307)
				{

					/*putimage(0, 0, &img2);*/
					gotostageselect();
					//initgraph(960, 580, EX_SHOWCONSOLE);
					//表示选择进入关卡选择

				}

				//退出关卡
				else if (msg.x >= 401 && msg.y >= 326 && msg.x <= 572 && msg.y <= 362)
				{
					exit(-1);
				}//弹出帮助界面
				else if (msg.x >= 401 && msg.y >= 400 && msg.x <= 572 && msg.y <= 440)
				{
					gotoHelp();
				}
			}

			}
		}


	}
	getchar();
	return 0;


}


/*--------------以下为其他函数实现部分--------------*/
/*界面切换
负责人：
功能：	界面设计要求
		主界面
		设置，开始游戏，退出游戏，帮助
		设置—音效-开关；
		帮助—游戏介绍，按键介绍，制作人员
		退出游戏—跳出程序
		开始游戏—跳转至选关界面
注意：
		以上部分要求有bgm,每个子界面都要有返回按键
参数：
		无
返回值：
		无
*/
void gotostageselect() {
	while (true)
	{
		putimage(0, 0, &img2);//输出关卡选择界面
		ExMessage msg = { 0 };
		if (peekmessage(&msg, EX_MOUSE))//检测鼠标信息
		{
			switch (msg.message)//筛选鼠标信息类型
			{
			case WM_LBUTTONDOWN://左键信息
			{
				if (msg.x >= 360 && msg.y >= 155 && msg.x <= 656 && msg.y <= 206)
				{//进入主题一
					main1();
					initgraph(960, 580, EX_SHOWCONSOLE);
					//getchar();
					return;

				}
				else if (msg.x >= 360 && msg.y >= 254 && msg.x <= 656 && msg.y <= 304)
				{//进入主题二
					main2();
					initgraph(960, 580, EX_SHOWCONSOLE);
					//getchar();
					return;

				}
				else if (msg.x >= 360 && msg.y >= 349 && msg.x <= 656 && msg.y <= 392)
				{//进入主题三
					main3();
					initgraph(960, 580, EX_SHOWCONSOLE);
					//getchar();
					return;

				}
				else if (msg.x >= 410 && msg.y >= 480 && msg.x <= 572 && msg.y <= 560)
				{
					//返回按钮a
					return;
				}
				

			}
			}
		}


	}
	getchar();
}

void gotoHelp() {
	putimage(0, 0, &img1);
	while (true)
	{
		ExMessage msg = { 0 };
		if (peekmessage(&msg, EX_MOUSE))//检测鼠标信息
		{
			switch (msg.message)//筛选鼠标信息类型
			{
			case WM_LBUTTONDOWN://左键信息
			{

				if (msg.x >= 420 && msg.y >= 508 && msg.x <= 536 && msg.y <= 560)
				{
					//返回按钮
					return;
				}

			}
			}
		}


	}
	getchar();
}

/*
进入选关界面：
二．游戏内部界面：
*/


/*
绘图--大致为：定义数组（框架） + 设计数组（内部地形）
功能：创建游戏关卡与地图设计（三维数组）；跟据不同数字用图片替换相应数字对应位置（easyx）
参数：无
返回值：无
*/


int map5[4][WIDTH][HEIGHT] =
{ 
	{
	{1,1,1,1,1,1},
	{1,0,4,0,2,1},
	{1,0,3,3,0,1},
	{1,0,0,1,2,1},
	{1,0,0,0,0,1},
	{1,1,1,1,1,1},
},
{
	{1,1,1,1,1,1},
	{1,0,2,4,1,1},
	{1,0,2,3,1,1},
	{1,0,3,0,0,1},
	{1,1,0,0,0,1},
	{1,1,1,1,1,1},
},
{
	{1,1,1,1,1,1},
	{1,2,0,0,2,1},
	{1,0,3,3,0,1},
	{1,3,0,1,0,1},
	{1,4,0,2,0,1},
	{1,1,1,1,1,1},
},
{
	{1,1,1,1,1,1},
	{1,2,0,1,2,1},
	{1,0,3,3,2,1},
	{1,0,0,3,4,1},
	{1,0,0,0,1,1},
	{1,1,1,1,1,1},
},
};
int map6[4][WIDTH][HEIGHT] = {
	{

	{1,1,1,1,1,1},
	{1,0,4,0,2,1},
	{1,0,3,3,0,1},
	{1,0,0,1,2,1},
	{1,0,0,0,0,1},
	{1,1,1,1,1,1},
},
{
	{1,1,1,1,1,1},
	{1,0,2,4,1,1},
	{1,0,2,3,1,1},
	{1,0,3,0,0,1},
	{1,1,0,0,0,1},
	{1,1,1,1,1,1},
},
{
	{1,1,1,1,1,1},
	{1,2,0,0,2,1},
	{1,0,3,3,0,1},
	{1,3,0,1,0,1},
	{1,4,0,2,0,1},
	{1,1,1,1,1,1},
},
{
	{1,1,1,1,1,1},
	{1,2,0,1,2,1},
	{1,0,3,3,2,1},
	{1,0,0,3,4,1},
	{1,0,0,0,1,1},
	{1,1,1,1,1,1},
},
};



int map3[4][WIDTH_2][HEIGHT_2] =
{
	{
		{0,0,1,1,1,1,1},
		{0,1,1,0,0,0,1},
		{1,1,0,0,3,4,1},
		{1,2,0,3,0,1,1},
		{1,2,3,0,1,1,0},
		{1,2,0,1,1,0,0},
		{1,1,1,1,0,0,0},
	},
	{
		{0,0,1,1,1,1,1},
		{1,1,1,0,0,0,1},
		{1,0,0,2,4,0,1},
		{1,0,3,3,0,0,1},
		{1,1,2,0,1,1,1},
		{0,1,0,0,1,0,0},
		{0,1,1,1,1,0,0},
	},
	{
		{1,1,1,1,1,1,1},
		{1,0,0,0,2,2,1},
		{1,0,3,0,4,2,1},
		{1,1,3,3,0,0,1},
		{0,1,0,0,1,1,1},
		{0,1,0,0,1,0,0},
		{0,1,1,1,1,0,0},
	},
	{
		{0,0,1,1,1,1,0},
		{1,1,1,0,2,1,0},
		{1,4,0,0,0,1,1},
		{1,0,3,3,2,2,1},
		{1,0,3,0,3,2,1},
		{1,1,0,0,1,1,1},
		{0,1,1,1,1,0,0},
	},

};
int map4[4][WIDTH_2][HEIGHT_2] = { {
		{0,0,1,1,1,1,1},
		{0,1,1,0,0,0,1},
		{1,1,0,0,3,4,1},
		{1,2,0,3,0,1,1},
		{1,2,3,0,1,1,0},
		{1,2,0,1,1,0,0},
		{1,1,1,1,0,0,0},
	},
	{
		{0,0,1,1,1,1,1},
		{1,1,1,0,0,0,1},
		{1,0,0,2,4,0,1},
		{1,0,3,3,0,0,1},
		{1,1,2,0,1,1,1},
		{0,1,0,0,1,0,0},
		{0,1,1,1,1,0,0},
	},
	{
		{1,1,1,1,1,1,1},
		{1,0,0,0,2,2,1},
		{1,0,3,0,4,2,1},
		{1,1,3,3,0,0,1},
		{0,1,0,0,1,1,1},
		{0,1,0,0,1,0,0},
		{0,1,1,1,1,0,0},
	},
	{
		{0,0,1,1,1,1,0},
		{1,1,1,0,2,1,0},
		{1,4,0,0,0,1,1},
		{1,0,3,3,2,2,1},
		{1,0,3,0,3,2,1},
		{1,1,0,0,1,1,1},
		{0,1,1,1,1,0,0},
	},

};
int map1[4][HEIGHT_3][WIDTH_3] =
{ 
	{
		{0,0,0,1,1,1,1,1,1,1},
		{0,0,1,1,0,0,1,0,4,1},
		{0,0,1,0,0,0,1,0,0,1},
		{0,0,1,3,0,3,0,3,0,1},
		{0,0,1,0,3,1,1,0,0,1},
		{1,1,1,0,3,0,1,0,1,1},
		{1,2,2,2,2,2,0,0,1,0},
		{1,1,1,1,1,1,1,1,1,0},
	},
	{
		{0,0,0,1,1,1,1,1,1,0},
		{0,1,1,1,0,0,0,0,1,0},
		{1,1,2,0,3,1,1,0,1,1},
		{1,2,2,3,0,3,0,0,4,1},
		{1,2,2,0,3,0,3,0,1,1},
		{1,1,1,1,1,1,0,0,1,0},
		{0,0,0,0,0,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0},
	},
	{
		{0,1,1,1,1,1,1,1,0,0},
		{0,1,2,2,2,2,0,1,0,0},
		{1,1,1,2,2,2,3,1,1,1},
		{1,0,0,3,1,3,0,3,0,1},
		{1,0,3,3,0,0,1,3,0,1},
		{1,0,0,0,0,1,0,0,0,1},
		{1,1,1,1,0,4,0,1,1,1},
		{0,0,0,1,1,1,1,1,0,0},
	},
	{
		{0,0,1,1,1,1,1,0,0,0},
		{1,1,1,0,0,0,1,1,1,1},
		{1,0,0,0,3,0,3,0,0,1},
		{1,0,3,3,4,0,0,0,0,1},
		{1,1,1,0,3,1,1,1,1,1},
		{0,0,1,3,0,2,2,1,0,0},
		{0,0,1,2,2,2,2,1,0,0},
		{0,0,1,1,1,1,1,1,0,0},
	}
};
int map2[4][HEIGHT_3][WIDTH_3] = {
	{
		{0,0,0,1,1,1,1,1,1,1},
		{0,0,1,1,0,0,1,0,4,1},
		{0,0,1,0,0,0,1,0,0,1},
		{0,0,1,3,0,3,0,3,0,1},
		{0,0,1,0,3,1,1,0,0,1},
		{1,1,1,0,3,0,1,0,1,1},
		{1,2,2,2,2,2,0,0,1,0},
		{1,1,1,1,1,1,1,1,1,0},
	},
	{
		{0,0,0,1,1,1,1,1,1,0},
		{0,1,1,1,0,0,0,0,1,0},
		{1,1,2,0,3,1,1,0,1,1},
		{1,2,2,3,0,3,0,0,4,1},
		{1,2,2,0,3,0,3,0,1,1},
		{1,1,1,1,1,1,0,0,1,0},
		{0,0,0,0,0,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0},
	},
	{
		{0,1,1,1,1,1,1,1,0,0},
		{0,1,2,2,2,2,0,1,0,0},
		{1,1,1,2,2,2,3,1,1,1},
		{1,0,0,3,1,3,0,3,0,1},
		{1,0,3,3,0,0,1,3,0,1},
		{1,0,0,0,0,1,0,0,0,1},
		{1,1,1,1,0,4,0,1,1,1},
		{0,0,0,1,1,1,1,1,0,0},
	},
	{
		{0,0,1,1,1,1,1,0,0,0},
		{1,1,1,0,0,0,1,1,1,1},
		{1,0,0,0,3,0,3,0,0,1},
		{1,0,3,3,4,0,0,0,0,1},
		{1,1,1,0,3,1,1,1,1,1},
		{0,0,1,3,0,2,2,1,0,0},
		{0,0,1,2,2,2,2,1,0,0},
		{0,0,1,1,1,1,1,1,0,0},
	}
};




void loading_1() {
	for (int p = 0; p < 7; p++)
	{
		char file3[20] = "";
		sprintf(file3, "zombie\\%d.jfif", p + 1);
		loadimage(img_all_3 + p, file3, 64, 64);
	}
}

void map_1() {
	for (p = 0; p < 6; p++)
	{
		for (q = 0; q < 6; q++)
		{
			int i = q * 64;
			int j = p * 64;
			switch (map5[level_3][p][q])
			{
			case FLOOR:
				putimage(i, j, img_all_3);
				break;
			case WALL:
				putimage(i, j, img_all_3 + 1);
				break;
			case END:
				putimage(i, j, img_all_3 + 2);
				break;
			case BOX:
				putimage(i, j, img_all_3 + 3);
				break;
			case PLAYER:
				putimage(i, j, img_all_3 + 4);
				break;
			case BOX_END:
				putimage(i, j, img_all_3 + 5);
				break;
			case PLAYER_END:
				putimage(i, j, img_all_3 + 6);
				break;
			}
		}
	}
}

void loading_2() {
	for (int n = 0; n < 7; n++)
	{
		char file_2[20] = "";
		sprintf(file_2, "homework\\%d.jfif", n + 1);
		loadimage(img_all_2 + n, file_2, 64, 64);
	}
}

void map_2() {
	for (n = 0; n < WIDTH_2; n++)
	{
		for (m = 0; m < WIDTH_2; m++)
		{
			int i = m * 64;
			int j = n * 64;
			switch (map3[level_2][n][m])
			{
			case FLOOR:
				putimage(i, j, img_all_2);
				break;
			case WALL:
				putimage(i, j, img_all_2 + 1);
				break;
			case END:
				putimage(i, j, img_all_2 + 2);
				break;
			case BOX:
				putimage(i, j, img_all_2 + 3);
				break;
			case PLAYER:
				putimage(i, j, img_all_2 + 4);
				break;
			case BOX_END:
				putimage(i, j, img_all_2 + 5);
				break;
			case PLAYER_END:
				putimage(i, j, img_all_2 + 6);
				break;
			}
		}
	}
}

void loading_3() {
	for (int x = 0; x <7; x++)
	{
		char file[20] = "";
		sprintf(file, "坤\\bmp.%d.jfif", x + 1);
		loadimage(img_all + x, file, 64, 64);
	}
}

void map_3() {
	for (x = 0; x < HEIGHT_3; x++)
	{
		for (y = 0; y < WIDTH_3; y++)
		{
			int i = y * 64;
			int j = x * 64;
			switch (map1[level][x][y])
			{
			case FLOOR:
				putimage(i, j, img_all);
				break;
			case WALL:
				putimage(i, j, img_all + 1);
				break;
			case END:
				putimage(i, j, img_all + 2);
				break;
			case BOX:
				putimage(i, j, img_all + 3);
				break;
			case PLAYER:
				putimage(i, j, img_all + 4);
				break;
			case BOX_END:
				putimage(i, j, img_all + 5);
				break;
			case PLAYER_END:
				putimage(i, j, img_all + 6);
				break;
			}
		}
	}
}




/*
2.按键处理
功能：确定玩家坐标位置；判断用户按键后根据用户按下的按键与坐标运算（x，y），判断并实现地图内图标的移动；实现按键重置
参数：无
返回值:无
*/
void keystrock_1() {
	for (p = 0; p < WIDTH; p++)
	{
		for (q = 0; q < WIDTH; q++)
		{
			if (map5[level_3][p][q] == PLAYER || map5[level_3][p][q] == PLAYER_END)
			{
				goto end;
			}
		}
	}
end:;
	char ch = _getch();
	switch (ch)
	{
	case'w':
	case 'W':
		if (map5[level_3][p - 1][q] == FLOOR || map5[level_3][p - 1][q] == END)
		{
			map5[level_3][p - 1][q] += PLAYER;
			map5[level_3][p][q] -= PLAYER;
		}
		else if (map5[level_3][p - 1][q] == BOX || map5[level_3][p - 1][q] == BOX_END)
		{
			if (map5[level_3][p - 2][q] == FLOOR || map5[level_3][p - 2][q] == END)
			{
				map5[level_3][p - 2][q] += BOX;
				map5[level_3][p - 1][q] = map5[level_3][p - 1][q] - BOX + PLAYER;
				map5[level_3][p][q] -= PLAYER;
			}
		}
		break;

	case's':
	case'S':
		if (map5[level_3][p + 1][q] == FLOOR || map5[level_3][p + 1][q] == END)
		{
			map5[level_3][p + 1][q] += PLAYER;
			map5[level_3][p][q] -= PLAYER;
		}
		else if (map5[level_3][p + 1][q] == BOX || map5[level_3][p + 1][q] == BOX_END)
		{
			if (map5[level_3][p + 2][q] == FLOOR || map5[level_3][p + 2][q] == END)
			{
				map5[level_3][p + 2][q] += BOX;
				map5[level_3][p + 1][q] = map5[level_3][p + 1][q] - BOX + PLAYER;
				map5[level_3][p][q] -= PLAYER;
			}
		}
		break;

	case'a':
	case'A':
		if (map5[level_3][p][q - 1] == FLOOR || map5[level_3][p][q - 1] == END)
		{
			map5[level_3][p][q - 1] += PLAYER;
			map5[level_3][p][q] -= PLAYER;
		}
		else if (map5[level_3][p][q - 1] == BOX || map5[level_3][p][q - 1] == BOX_END)
		{
			if (map5[level_3][p][q - 2] == FLOOR || map5[level_3][p][q - 2] == END)
			{
				map5[level_3][p][q - 2] += BOX;
				map5[level_3][p][q - 1] = map5[level_3][p][q - 1] - BOX + PLAYER;
				map5[level_3][p][q] -= PLAYER;
			}
		}
		break;
	case'd':
	case'D':
		if (map5[level_3][p][q + 1] == FLOOR || map5[level_3][p][q + 1] == END)
		{
			map5[level_3][p][q + 1] += PLAYER;
			map5[level_3][p][q] -= PLAYER;
		}
		else if (map5[level_3][p][q + 1] == BOX || map5[level_3][p][q + 1] == BOX_END)
		{
			if (map5[level_3][p][q + 2] == FLOOR || map5[level_3][p][q + 2] == END)
			{
				map5[level_3][p][q + 2] += BOX;
				map5[level_3][p][q + 1] = map5[level_3][p][q + 1] - BOX + PLAYER;
				map5[level_3][p][q] -= PLAYER;
			}
		}
		break;
	case 'r':
	case 'R':
		for (int i = 0; i < WIDTH; i++) {
			for (int j = 0; j < HEIGHT; j++) {
				map5[level_3][i][j] = map6[level_3][i][j];
			}
		}
		break;
	}

}

void keystrock_2() {
	for (n = 0; n < WIDTH_2; n++)
	{
		for (m = 0; m < WIDTH_2; m++)
		{
			if (map3[level_2][n][m] == PLAYER || map3[level_2][n][m] == PLAYER_END)
			{
				goto end;
			}
		}
	}
end:;
	char ch = _getch();
	switch (ch)
	{
	case'w':
	case 'W':
		if (map3[level_2][n - 1][m] == FLOOR || map3[level_2][n - 1][m] == END)
		{
			map3[level_2][n - 1][m] += PLAYER;
			map3[level_2][n][m] -= PLAYER;
		}
		else if (map3[level_2][n - 1][m] == BOX || map3[level_2][n - 1][m] == BOX_END)
		{
			if (map3[level_2][n - 2][m] == FLOOR || map3[level_2][n - 2][m] == END)
			{
				map3[level_2][n - 2][m] += BOX;
				map3[level_2][n - 1][m] = map3[level_2][n - 1][m] - BOX + PLAYER;
				map3[level_2][n][m] -= PLAYER;
			}
		}
		break;
	case's':
	case'S':
		if (map3[level_2][n + 1][m] == FLOOR || map3[level_2][n + 1][m] == END)
		{
			map3[level_2][n + 1][m] += PLAYER;
			map3[level_2][n][m] -= PLAYER;
		}
		else if (map3[level_2][n + 1][m] == BOX || map3[level_2][n + 1][m] == BOX_END)
		{
			if (map3[level_2][n + 2][m] == FLOOR || map3[level_2][n + 2][m] == END)
			{
				map3[level_2][n + 2][m] += BOX;
				map3[level_2][n + 1][m] = map3[level_2][n + 1][m] - BOX + PLAYER;
				map3[level_2][n][m] -= PLAYER;
			}
		}
		break;
	case'a':
	case'A':
		if (map3[level_2][n][m - 1] == FLOOR || map3[level_2][n][m - 1] == END)
		{
			map3[level_2][n][m - 1] += PLAYER;
			map3[level_2][n][m] -= PLAYER;
		}
		else if (map3[level_2][n][m - 1] == BOX || map3[level_2][n][m - 1] == BOX_END)
		{
			if (map3[level_2][n][m - 2] == FLOOR || map3[level_2][n][m - 2] == END)
			{
				map3[level_2][n][m - 2] += BOX;
				map3[level_2][n][m - 1] = map3[level_2][n][m - 1] - BOX + PLAYER;
				map3[level_2][n][m] -= PLAYER;
			}
		}
		break;
	case'd':
	case'D':
		if (map3[level_2][n][m + 1] == FLOOR || map3[level_2][n][m + 1] == END)
		{
			map3[level_2][n][m + 1] += PLAYER;
			map3[level_2][n][m] -= PLAYER;
		}
		else if (map3[level_2][n][m + 1] == BOX || map3[level_2][n][m + 1] == BOX_END)
		{
			if (map3[level_2][n][m + 2] == FLOOR || map3[level_2][n][m + 2] == END)
			{
				map3[level_2][n][m + 2] += BOX;
				map3[level_2][n][m + 1] = map3[level_2][n][m + 1] - BOX + PLAYER;
				map3[level_2][n][m] -= PLAYER;
			}
		}
		break;
	case 'r':
	case 'R':
		for (int i = 0; i < WIDTH_2; i++) {
			for (int j = 0; j < HEIGHT_2; j++) {
				map3[level_2][i][j] = map4[level_2][i][j];
			}
		}
		break;
	}

}

void keystrock_3() {
	for (x = 0; x < HEIGHT_3; x++)
	{
		for (y = 0; y < WIDTH_3; y++)
		{
			if (map1[level][x][y] == PLAYER || map1[level][x][y] == PLAYER_END)
			{
				goto end;
			}
		}
	}
end:;
	char ch = _getch();
	switch (ch)
	{
	case'w':
	case 'W':
		if (map1[level][x - 1][y] == FLOOR || map1[level][x - 1][y] == END)
		{
			map1[level][x - 1][y] += PLAYER;
			map1[level][x][y] -= PLAYER;
		}
		else if (map1[level][x - 1][y] == BOX || map1[level][x - 1][y] == BOX_END)
		{
			if (map1[level][x - 2][y] == FLOOR || map1[level][x - 2][y] == END)
			{
				map1[level][x - 2][y] += BOX;
				map1[level][x - 1][y] = map1[level][x - 1][y] - BOX + PLAYER;
				map1[level][x][y] -= PLAYER;
			}
		}
		break;
	case's':
	case'S':
		if (map1[level][x + 1][y] == FLOOR || map1[level][x + 1][y] == END)
		{
			map1[level][x + 1][y] += PLAYER;
			map1[level][x][y] -= PLAYER;
		}
		else if (map1[level][x + 1][y] == BOX || map1[level][x + 1][y] == BOX_END)
		{
			if (map1[level][x + 2][y] == FLOOR || map1[level][x + 2][y] == END)
			{
				map1[level][x + 2][y] += BOX;
				map1[level][x + 1][y] = map1[level][x + 1][y] - BOX + PLAYER;
				map1[level][x][y] -= PLAYER;
			}
		}
		break;
	case'a':
	case'A':
		if (map1[level][x][y - 1] == FLOOR || map1[level][x][y - 1] == END)
		{
			map1[level][x][y - 1] += PLAYER;
			map1[level][x][y] -= PLAYER;
		}
		else if (map1[level][x][y - 1] == BOX || map1[level][x][y - 1] == BOX_END)
		{
			if (map1[level][x][y - 2] == FLOOR || map1[level][x][y - 2] == END)
			{
				map1[level][x][y - 2] += BOX;
				map1[level][x][y - 1] = map1[level][x][y - 1] - BOX + PLAYER;
				map1[level][x][y] -= PLAYER;
			}
		}
		break;
	case'd':
	case'D':
		if (map1[level][x][y + 1] == FLOOR || map1[level][x][y + 1] == END)
		{
			map1[level][x][y + 1] += PLAYER;
			map1[level][x][y] -= PLAYER;
		}
		else if (map1[level][x][y + 1] == BOX || map1[level][x][y + 1] == BOX_END)
		{
			if (map1[level][x][y + 2] == FLOOR || map1[level][x][y + 2] == END)
			{
				map1[level][x][y + 2] += BOX;
				map1[level][x][y + 1] = map1[level][x][y + 1] - BOX + PLAYER;
				map1[level][x][y] -= PLAYER;
			}
		}
		break;
	case 'r':
	case 'R':
		for (int i = 0; i < HEIGHT_3; i++) {
			for (int j = 0; j < WIDTH_3; j++) {
				map1[level][i][j] = map2[level][i][j];
			}
		}
		break;
	}

}




/*
3.判断过关
功能：判断地图内是否还存在BOX,；
参数：无
返回值：无
*/
bool judge_1() {
	for (int x = 0; x < WIDTH; x++)
	{
		for (int y = 0; y < WIDTH; y++)
		{
			if (map5[level_3][x][y] == BOX)
			{
				return false;
			}
		}
	}
	return true;
}

bool judge_2() {
	for (int x = 0; x < WIDTH_2; x++)
	{
		for (int y = 0; y < WIDTH_2; y++)
		{
			if (map3[level_2][x][y] == BOX)
			{
				return false;
			}
		}
	}
	return true;
}

bool judge_3() {
	for (int x = 0; x < HEIGHT_3; x++)
	{
		for (int y = 0; y < WIDTH_3; y++)
		{
			if (map1[level][x][y] == BOX)
			{
				return false;
			}
		}
	}
	return true;
}




//背景音乐
void playerBGM_3()
{
	mciSendString("open 国产凌凌漆片头爱给网.mp3 alias bkmusic3", 0, 0, 0);
	mciSendString("play bkmusic3 repeat", 0, 0, 0);
}

void playerBGM_5()
{
	mciSendString("open BabyShark.mp3 alias bkmusic5", 0, 0, 0);
	mciSendString("play bkmusic5 repeat", 0, 0, 0);
}

void playerBGM_1()
{
	mciSendString("open 只因你太美.mp3 alias bkmusic", 0, 0, 0);
	mciSendString("play bkmusic repeat", 0, 0, 0);
}

//通关音乐
void playerBGM_4()
{
	mciSendString("open 1爱给网m.mp3 alias bkmusic4", 0, 0, 0);
	mciSendString("play bkmusic4", 0, 0, 0);
}

void playerBGM_6()
{
	mciSendString("open 1爱给网m.mp3 alias bkmusic6", 0, 0, 0);
	mciSendString("play bkmusic6", 0, 0, 0);
}

void playerBGM_2()
{
	mciSendString("open 1爱给网m.mp3 alias bkmusic", 0, 0, 0);
	mciSendString("play bkmusic", 0, 0, 0);
}


/*---------------游戏内部整合---------------*/
//鬼
void main1() {
	initgraph(WIDTH * 64, WIDTH * 64);
	loading_1();
	playerBGM_3();
	while(1) 
	{
		map_1();
		if (judge_1())//判断是否还有箱子，若没有则进入判断
		{
			level_3++;
			if (level_3 > 3)
			{
				mciSendString("close bkmusic3", 0, 0, 0);
				playerBGM_4();
				settextcolor(RED);
				settextstyle(25, 0, "宋体");
				setbkmode(TRANSPARENT);
				outtextxy(80, 180, "我害怕鬼，但鬼未伤我分毫！");
				_getch();
				break;
			}
		}
		keystrock_1();
	}
}

//homework
void main2() {
	initgraph(WIDTH_2 * 64, WIDTH_2 * 64);
	loading_2();
	playerBGM_5();
	while(1)
	{

		map_2();
		if (judge_2())//判断是否还有箱子，若没有则进入判断
		{

			level_2++;
			if (level_2 > 3)
			{
				mciSendString("close bkmusic5", 0, 0, 0);
				playerBGM_6();
				settextcolor(RED);
				settextstyle(25, 0, "宋体");
				setbkmode(TRANSPARENT);
				outtextxy(80, 180, "没有人比你更懂写作业！");
				_getch();
				break;
			}
		}
		keystrock_2();
	}
}

//只因
void main3() {
	initgraph(WIDTH_3 * 64, HEIGHT_3 * 64);
	loading_3();
	while(1)
	{
		playerBGM_1();
		map_3();
		if (judge_3())//判断是否还有箱子，若没有则进入判断
		{
	
	
			level++;
			if (level >3)
			{
				mciSendString("close bkmusic", 0, 0, 0);
				playerBGM_2();
				settextcolor(RED);
				settextstyle(25, 0, "宋体");
				setbkmode(TRANSPARENT);
				outtextxy(120, 180, "你真的太美！");
				_getch();
				break;
			}
		}
		keystrock_3();
	}
	//closegraph();
}


